# Setup Cloudprober
# Create Namespace
- name: Create monitoring namespace
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    proxy: "{{ proxy_url | default(omit, true) }}"
    proxy_headers: "{{ proxy_headers | default(omit, true) }}"
    api_version: v1
    name: "{{ cloudprober_namespace }}"
    kind: Namespace
  tags: cloudprober

# Create ConfigMap to store configuration
- name: Create Cloudprober configmap
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    proxy: "{{ proxy_url | default(omit, true) }}"
    proxy_headers: "{{ proxy_headers | default(omit, true) }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ cloudprober_configmap }}"
        namespace: "{{ cloudprober_namespace }}"
      data:
        cloudprober.cfg: |-
          surfacer {
            type: PROMETHEUS

            prometheus_surfacer {
              # Following option adds a prefix to exported metrics, for example,
              # "total" metric is exported as "cloudprober_total".
              metrics_prefix: "cloudprober_"
            }
          }
          probe {
            name: "Loki_Probe"
            type: HTTP
            targets {
              host_names: "{{ fluentbit_target_host }}"
            }
            http_probe {
              header {
                key: "Authorization"
                value: "Basic {{'{{env "loki_secret"}}'}}"  # loki_secret stored in 1Password cloudprober as password with content: echo -n "<user>:<password>" | base64 -w 0 | base64
               }
              latency_breakdown: ALL_STAGES
            }
            validator {
              name: "status_code_200"
              http_validator {
                success_status_codes: "200"
              }
            }
            interval_msec: 2000
            timeout_msec:  1000      
          }          
          probe {
            name: "vmagent_probe"
            type: HTTP
            targets {
              host_names: "{{ vmagent_ingress_host }}"
            }
            http_probe {
              relative_url: "/health"
              latency_breakdown: ALL_STAGES
              header {
                key: "Authorization"
                value: "Basic {{'{{env "vmagent_secret"}}'}}" # vmagent_secret stored in 1Password cloudprober as password with content: echo -n "<user>:<password>" | base64 -w 0 | base64
              }
            }
            validator {
              name: "data-integrity"
              integrity_validator {
                pattern_string: "OK"
              }
            }
          }
          probe {
            name: "K8S_Api"
            type: HTTP
            http_probe {
              protocol: HTTPS
              relative_url: "/readyz"
              latency_breakdown: ALL_STAGES
              tls_config {
                disable_cert_validation: true
              }         
            }
            validator {
              name: "status_code_200"
              http_validator {
                success_status_codes: "200"
              }
            }    
            targets {
              k8s {
                namespace: "default"
                services: "kubernetes"
              }
            }
            interval_msec: 5000
            timeout_msec:  1000
          }       
          probe {
            name: "K8S_ControlPlane"
            type: HTTP
            http_probe {
              protocol: HTTPS
              relative_url: "/readyz"
              latency_breakdown: ALL_STAGES
              tls_config {
                disable_cert_validation: true
              }         
            }
            validator {
              name: "status_code_200"
              http_validator {
                success_status_codes: "200"
              }
            }    
            targets {
              k8s {
                namespace: "default"
                endpoints: "kubernetes"
              }
            }
            interval_msec: 5000
            timeout_msec:  1000
          } 
          probe {
            name: "coredns pods"
            type: DNS
            targets {
              k8s {
                namespace: "kube-system"
                pods: "coredns.*"
              }
            }
            interval_msec: 2000
            timeout_msec:  1000
          }
          probe {
            name: "Fluentbit pods"
            type: PING
            targets {
              k8s {
                namespace: "kube-system"
                pods: "fluent.*"
              }
            }
            ping_probe {
              use_datagram_socket: false
            }
            interval_msec: 2000
            timeout_msec:  1000
          }          
        tags: cloudprober 
        
# Create Secret to store tokens and access data required
- name: Create Cloudprober secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    proxy: "{{ proxy_url | default(omit, true) }}"
    proxy_headers: "{{ proxy_headers | default(omit, true) }}"
    definition:
      apiVersion: onepassword.com/v1
      kind: OnePasswordItem
      metadata:
        name: "{{ cloudprober_secret }}"
        namespace: "{{ cloudprober_namespace }}"
      spec:
        itemPath: "vaults/{{ vault }}/items/cloudprober"
  tags: cloudprober

# add helm chart location
- name: Add Cloudprober chart repo
  kubernetes.core.helm_repository:
    name: cloudprober
    repo_url: "https://helm.cloudprober.org"
  check_mode: false
  changed_when: false
  tags: cloudprober

# execute helm chart with values
- name: Install Cloudprober
  kubernetes.core.helm:
    name: cloudprober
    chart_ref: cloudprober/cloudprober
    update_repo_cache: true
    chart_version: "{{ cloudprober_chart_version }}"
    kubeconfig: "{{ kubeconfig }}"
    release_namespace: "{{ cloudprober_namespace }}"
    wait: true
    values:
      "{{ cloudprober_values }}"
  tags: cloudprober