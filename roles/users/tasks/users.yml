---

  - name: create groups
    group:
      name: "{{ item.name }}"
      gid: "{{ item.gid }}"
      state: present
    when: item.name is defined and ((item.allhosts is defined and item.allhosts == True) or (item.hosts is defined and inventory_hostname in item.hosts))
    with_items:
      - "{{ present_groups }}"

  - getent:
      database: group
      split: ':'

  - name: clean up root authorized_keys
    authorized_key:
      user: root
      state: present
      key: "{{ lookup('file', 'sshkeys/technicaluser.pub') }}"
      exclusive: True

  - name: create users
    user:
      name: "{{ item.name }}"
      uid: "{{ item.uid }}"
      shell: /bin/bash
      state: present
    vars:
      vm_permissions: "{{ item.permissions.vms | default({}) }}"
      allowed: "{{ (vm_permissions.allhosts | default(false)) or (inventory_hostname in (vm_permissions.hosts | default([]))) }}"
    when: item.name is defined and allowed
    loop: "{{ present_users }}"
    loop_control:
      label: "{{ item.name }}"

  - getent:
      database: group
      split: ':'

  - name: add users to groups
    user:
      name: "{{ item.0.name }}"
      groups: "{{ item.1 }}"
      append: yes
      state: present
    vars:
      vm_permissions: "{{ item.0.permissions.vms | default({}) }}"
      allowed: "{{ (vm_permissions.allhosts | default(false)) or (inventory_hostname in (vm_permissions.hosts | default([]))) }}"
    when: item.0.name is defined and allowed and item.1 in ansible_facts.getent_group
    loop: "{{ present_users | subelements('permissions.vms.groups', skip_missing=True)}}"
    loop_control:
      label: "{{ item.0.name }}-{{ item.1 }}"

  - name: Set up authorized keys for users
    authorized_key:
      user: "{{ item.name }}"
      state: present
      key: "{{ lookup('file', 'sshkeys/{{ item.name }}.pub') }}"
      exclusive: False
    vars:
      vm_permissions: "{{ item.permissions.vms | default({}) }}"
      allowed: "{{ (vm_permissions.allhosts | default(false)) or (inventory_hostname in (vm_permissions.hosts | default([]))) }}"
    when: item.name is defined and allowed
    ignore_errors: "{{ ansible_check_mode }}" # Fails because new users were not created
    loop: "{{ present_users }}"
    loop_control:
      label: "{{ item.name }}"

  - name: set password for technicaluser 
    user: 
      name: technicaluser
      update_password: always
      password: "{{ lookup('dbildungscloud.onepwd.onepwd', secret_name='technicaluser', vault='Infrastructure', session_shorthand='ansible-run', credentials=op_credentials, field='password')| string | password_hash('sha512')}}"

  - name: remove users ( absent general )
    user:
      name: "{{ item.name }}"
      shell: /bin/false
      state: absent
      remove: yes
    loop: "{{ absent_users }}"
    loop_control:
      label: "{{ item.name }}"

  - name: remove users ( absent host )
    user:
      name: "{{ item.name }}"
      shell: /bin/false
      state: absent
      remove: yes
    vars:
      vm_permissions: "{{ item.permissions.vms | default({}) }}"
      allowed: "{{ (vm_permissions.allhosts | default(false)) or (inventory_hostname in (vm_permissions.hosts | default([]))) }}"
    when: item.name is defined and not allowed
    loop: "{{ present_users }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Remove orphaned home directories
    #  This task asumes that the home directory of an already deleted user is stored with the name of the user below /home
    #  and will use absent_users as base for the operation
    ansible.builtin.file:
        path: /home/{{ item.name }}
        state: absent
    loop: "{{ absent_users }}"
    loop_control:
      label: "{{ item.name }}"

  # make it possible for devops group to sudo 
  - name: Make sudo without password for devops group possible
    copy:
      src: devops_nopasswd
      dest: /etc/sudoers.d/devops_nopasswd
      mode: 0440

  - name: set sshd_config 
    ansible.builtin.copy:
      src: sshd_config
      dest: /etc/ssh/sshd_config
      owner: root
      group: root
      mode: 0644
    notify: restart sshd