version: '3'

volumes:
  postgres-data:
  redis-data:
{% for instance in scalelite_greenlight_extra_instances %}
  redis-{{ instance.name }}-data:
{% endfor %}

services:
  db:
    image: "{{ scalelite_postgres_image }}"
    container_name: db
    restart: unless-stopped
    user: {{ scalelite_postgres_user_id }}:{{ scalelite_postgres_group_id }}
    volumes:
      - {{ scalelite_docker_volumes_folder }}/postgres_data/:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
      POSTGRES_HOST: db
    healthcheck:
      test:  ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_postgres_resources | to_nice_yaml | indent(8) }}

  redis:
    image: {{ scalelite_redis_image }}
    container_name: redis
    restart: unless-stopped
    user: {{ scalelite_redis_user_id }}:{{ scalelite_redis_group_id }}
    volumes:
      - {{ scalelite_docker_volumes_folder }}/redis_data:/data
    healthcheck:
      test:  ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_redis_resources | to_nice_yaml | indent(8) }}

  certbot:
    image: {{ scalelite_certbot_image_repository }}:{{ scalelite_certbot_image_tag }}
    container_name: certbot
    restart: unless-stopped
    user: {{ scalelite_certbot_user_id }}:{{ scalelite_certbot_group_id }}
    volumes:
      - {{ scalelite_letsencrypt_folder }}:/etc/letsencrypt
      - {{ scalelite_docker_volumes_folder }}/certbot/:/certbot
      - {{ scalelite_docker_volumes_folder }}/webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --logs-dir /certbot/logs --work-dir /certbot/work; sleep 12h & wait $${!}; done;'"
    environment:
{% if scalelite_aws_access_key_id is defined %}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
{% endif %}
      - OS_ACCESS_KEY=${OS_ACCESS_KEY}
      - OS_SECRET_KEY=${OS_SECRET_KEY}
    healthcheck:
      test:  ["CMD", "certbot", "certificates"]
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_certbot_resources | to_nice_yaml | indent(8) }}

  scalelite-nginx:
    image: {{ scalelite_nginx_image }}
    container_name: scalelite-nginx
    restart: unless-stopped
#    read_only: true
    user: {{ scalelite_nginx_user_id }}:{{ scalelite_certbot_group_id }}
    ports:
      - "80:8080"
      - "443:8443"
{% for server in scalelite_nginx_metrics_endpoints %}
      - "{{ server.public_port }}:{{ server.public_port }}"
{% endfor %}
    environment:
      PORT: "8080"
      SSL_PORT: "8443"
      MODSEC_RULE_ENGINE: {{ scalelite_modsec_mode }}
      BLOCKING_PARANOIA: {{ scalelite_modsec_level }}
      DETECTION_PARANOIA: {{ scalelite_modsec_level }}
      MODSEC_AUDIT_LOG: "/var/log/modsecurity/mod_sec_audit.log"
      MODSEC_DEBUG_LOG: "/var/log/modsecurity/mod_sec_debug.log"
      MODSEC_DEBUG_LOGLEVEL: {{ scalelite_modsec_debuglevel }}
      MODSEC_AUDIT_LOG_FORMAT: Native
      MODSEC_AUDIT_LOG_TYPE: Serial
      MODSEC_TMP_DIR: "/tmp"
      MODSEC_RESP_BODY_ACCESS: "On"
      MODSEC_RESP_BODY_MIMETYPE: "text/plain text/html text/xml application/json"
      ANOMALY_INBOUND: {{ scalelite_modsec_inbound_anomaly }}
      ANOMALY_OUTBOUND: {{ scalelite_modsec_outbound_anomaly }}      
      REPORTING_LEVEL:  {{ scalelite_modsec_reportlevel }}
      COMBINED_FILE_SIZES: "65535"      
    extra_hosts:
      - "host.docker.internal:host-gateway"
    tmpfs:
      - /tmp:rw,mode=777
#      - /opt/owasp-crs:rw,mode=777 
      - /var/cache/nginx:rw,mode=777 

    volumes:
      - {{ scalelite_docker_volumes_folder }}/owasp/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf:/opt/owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
      - {{ scalelite_docker_volumes_folder }}/owasp/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf:/opt/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
      - {{ scalelite_modsec_logs_folder }}:/var/log/modsecurity
      - {{ scalelite_nginx_logs_folder }}:/var/log/nginx
      - {{ scalelite_letsencrypt_folder }}:/etc/letsencrypt
      - {{ scalelite_docker_volumes_folder }}/webroot:/var/www/certbot
      - {{ scalelite_docker_volumes_folder }}/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - {{ scalelite_docker_volumes_folder }}/nginx/nodeexporter.conf:/etc/nginx/http.d/nodeexporter.conf
      - {{ scalelite_docker_volumes_folder }}/nginx/.htpasswd:/etc/nginx/.htpasswd
      - {{ scalelite_docker_volumes_folder }}/nginx/error.html:/var/www/html/error.html
{% if scalelite_greenlight_enabled | bool %}
      - {{ scalelite_docker_volumes_folder }}/nginx/scalelite/greenlight.nginx:/etc/nginx/http.d/scalelite/greenlight.nginx
{% endif %}
      - {{ scalelite_docker_volumes_folder }}/nginx/scalelite/acme-challenge.nginx:/etc/nginx/http.d/scalelite/acme-challenge.nginx
      - {{ scalelite_docker_volumes_folder }}/nginx/scalelite.conf:/etc/nginx/http.d/scalelite.conf
      - {{ scalelite_docker_volumes_folder }}/nginx/dhparam.pem:/etc/nginx/dhparam.pem
    depends_on:
      - certbot
      - scalelite-api
    healthcheck:
      test: curl --fail http://localhost:8080/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_nginx_resources | to_nice_yaml | indent(8) }}

  scalelite-api:
    image: "{{ scalelite_api_image }}"
    container_name: scalelite-api
    restart: unless-stopped
{% if scalelite_bbb_dialin_enabled | bool %}
    volumes:
      - {{ scalelite_docker_volumes_folder }}/scalelite/bridge.xml.builder:/srv/scalelite/app/views/fsapi/bridge.xml.builder
      - {{ scalelite_docker_volumes_folder }}/scalelite/pin_prompt.xml.builder:/srv/scalelite/app/views/fsapi/pin_prompt.xml.builder
      - {{ scalelite_docker_volumes_folder }}/scalelite/pin_reprompt.xml.builder:/srv/scalelite/app/views/fsapi/pin_reprompt.xml.builder
{% endif %}
    environment:
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - LOADBALANCER_SECRET=${LOADBALANCER_SECRET}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:{{ scalelite_postgres_password }}@db:5432/scalelite?pool=5
      - WEB_CONCURRENCY={{ scalelite_web_concurrency }}
      - RAILS_MAX_THREADS={{ scalelite_rails_max_threads }}
      - RECORDING_DISABLED=true
      - DB_DISABLED=true
      - SERVER_ID_IS_HOSTNAME=true
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_LOG_LEVEL={{ scalelite_log_level }}
      - MULTITENANCY_ENABLED={{ scalelite_multitenancy_enabled }}
{% if scalelite_bbb_dialin_enabled | bool %}
      - USE_EXTERNAL_VOICE_BRIDGE=true
{% endif %}
    depends_on:
      - db
      - redis
    healthcheck:
      test: curl -sS --connect-to {{ scalelite_hostname }}:80:localhost:3000 http://{{ scalelite_hostname }}/health_check | grep -c success > /dev/null
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_api_resources | to_nice_yaml | indent(8) }}

  scalelite-poller:
    image: "{{ scalelite_poller_image }}"
    container_name: scalelite-poller
    restart: unless-stopped
    environment:
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - REDIS_URL=redis://redis:6379
      - WEB_CONCURRENCY={{ scalelite_web_concurrency }}
      - RAILS_MAX_THREADS={{ scalelite_rails_max_threads }}
      - SERVER_ID_IS_HOSTNAME=true
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_LOG_LEVEL={{ scalelite_log_level }}
    depends_on:
      - scalelite-api
    healthcheck:
      test: rake liveness
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_poller_resources | to_nice_yaml | indent(8) }}

  bbb-autoscaler:
    image: {{ scalelite_autoscaler_image_repository }}:{{ scalelite_autoscaler_image_tag }}
    container_name: bbb-autoscaler
    restart: unless-stopped
    ports:
      - "{{ scalelite_autoscaler_config.metrics_exporter_port }}:{{ scalelite_autoscaler_config.metrics_exporter_port }}"
    volumes:
      - {{ scalelite_docker_volumes_folder }}/autoscaler/scaler_config.yml:/config/scaler_config.yml
{% if scalelite_autoscaler_environment | length > 0 %}
    environment:
      {{ scalelite_autoscaler_environment | to_nice_yaml | indent(6) }}
{% endif %}
    healthcheck:
      test: wget -q -O /dev/null  http://localhost:9199/metrics  || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_autoscaler_resources | to_nice_yaml | indent(8) }}

{% if scalelite_greenlight_enabled | bool %}
  greenlight:
    image: {{ scalelite_greenlight_image_repository }}:{{ scalelite_greenlight_image_tag }}
    container_name: greenlight
    restart: unless-stopped
    environment:
      - BIGBLUEBUTTON_ENDPOINT=https://{{ scalelite_hostname }}/bigbluebutton
      - BIGBLUEBUTTON_SECRET=${GREENLIGHT_BBB_API_TOKEN}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - RELATIVE_URL_ROOT=/greenlight
      - DEFAULT_LOCALE={{ scalelite_greenlight_default_locale }}
      - LOG_LEVEL={{ scalelite_greenlight_log_level }}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@db:5432/greenlight-v3
{% if greenlight_phone_number is defined %}
      - VOICE_BRIDGE_PHONE_NUMBER={{ greenlight_phone_number }}
{% endif %}
{% if scalelite_greenlight_allow_mail_notifications %}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_DOMAIN=${SMTP_DOMAIN}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_AUTH={{ scalelite_greenlight_smtp_auth }}
      - SMTP_STARTTLS_AUTO={{ scalelite_greenlight_smtp_auth | lower }}
      - SMTP_SENDER_EMAIL={{ scalelite_greenlight_smtp_sender }}
{% endif %}
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    depends_on:
      - db
      - redis
    deploy:
      resources:
        {{ scalelite_greenlight_resources | to_nice_yaml | indent(8) }}
{% endif %}

{% for instance in scalelite_greenlight_extra_instances %}
  redis-{{ instance.name }}:
    image: {{ scalelite_redis_image }}
    container_name: redis-{{ instance.name }}
    restart: unless-stopped
    user: {{ scalelite_redis_user_id }}:{{ scalelite_redis_group_id }}
    volumes:
      - {{ scalelite_docker_volumes_folder }}/redis_{{ instance.name }}_data:/data
    healthcheck:
      test:  ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    deploy:
      resources:
        {{ scalelite_redis_resources | to_nice_yaml | indent(8) }}

  greenlight-{{ instance.name }}:
    image: {{ instance.image | default(scalelite_greenlight_image_repository ~ ":" ~ scalelite_greenlight_image_tag) }}
    container_name: greenlight-{{ instance.name }}
    restart: unless-stopped
    environment:
      - BIGBLUEBUTTON_ENDPOINT=https://{{ scalelite_hostname }}/bigbluebutton
      - BIGBLUEBUTTON_SECRET=${GREENLIGHT_BBB_API_TOKEN}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - RELATIVE_URL_ROOT=/greenlight
      - DEFAULT_LOCALE={{ scalelite_greenlight_default_locale }}
      - LOG_LEVEL={{ scalelite_greenlight_log_level }}
      - REDIS_URL=redis://redis-{{ instance.name}}:6379
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@db:5432/greenlight-{{ instance.name }}-v3
{% if instance.phone_number is defined %}
      - VOICE_BRIDGE_PHONE_NUMBER={{ instance.phone_number }}
{% endif %}
{% if scalelite_greenlight_allow_mail_notifications %}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_DOMAIN=${SMTP_DOMAIN}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_AUTH={{ scalelite_greenlight_smtp_auth }}
      - SMTP_STARTTLS_AUTO={{ scalelite_greenlight_smtp_starttls_auto | lower }}
      - SMTP_SENDER_EMAIL=greenlight@{{ instance.hostname }}
{% endif %}
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      # start_period: 60s
    depends_on:
      - db
      - redis-{{ instance.name }}
    deploy:
      resources:
        {{ scalelite_greenlight_resources | to_nice_yaml | indent(8) }}
{% endfor %}

  postgres-exporter:
    image: {{ scalelite_postgres_exporter_image }}
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/?sslmode=disable"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9187"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        {{ scalelite_postgres_exporter_resources | to_nice_yaml | indent(8) }}
