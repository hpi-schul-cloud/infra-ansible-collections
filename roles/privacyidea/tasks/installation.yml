---
- name: Install packages
  apt:
    name: "{{ privacyidea_packages }}"
    state: present

- name: Create privacyIDEA directories
  file:
    path: "{{ item.path }}"
    state: directory
    owner: www-data
    group: www-data
    mode: "{{ item.mode }}"
  loop:
    - { path: '/etc/privacyidea', mode: '0755' }
    - { path: '/opt/privacyidea', mode: '0755' }
    - { path: '/var/log/privacyidea', mode: '0755' }
    - { path: '/run/uwsgi/app/privacyidea', mode: '0755' }
    - { path: '/var/log/uwsgi', mode: '0755' }
    - { path: '/run/uwsgi', mode: '0775' }
  become: true
  notify: restart uWSGI

- name: Create uWSGI and privacyidea log files
  file:
    path: "{{ item.path }}"
    state: touch
    owner: www-data
    group: www-data
    mode: '0664'
  loop:
    - { path: '/var/log/uwsgi/privacyidea.log' }
    - { path: '/var/log/uwsgi/error.log' }
    - { path: '/var/log/uwsgi/request.log' }
    - { path: '/var/log/privacyidea/privacyidea.log' }
  become: true
  notify: restart uWSGI
  
- name: Install virtualenv
  pip:
    name: virtualenv
  become: true

- name: Create a virtualenv for privacyIDEA
  command: python3 -m venv "{{ privacyidea_dir }}/virtualenv"
  args:
    creates: "{{ privacyidea_dir }}/virtualenv"
  become: true

- name: Install privacyidea dependencies
  pip:
    virtualenv: "{{ privacyidea_dir }}/virtualenv"
    requirements: "https://raw.githubusercontent.com/privacyidea/privacyidea/v{{ privacyidea_version }}/requirements.txt"

- name: Install privacyIDEA {{ privacyidea_version }}
  pip:
    virtualenv: "{{ privacyidea_dir }}/virtualenv"
    name: "privacyIDEA=={{ privacyidea_version }}"

- name: Create MariaDB database
  mysql_db:
    name: "{{ privacyidea_mariadb_name }}"
    state: present
    login_user: "{{ privacyidea_mariadb_username }}"
    login_password: "{{ privacyidea_mariadb_password }}"
    login_host: "{{ privacyidea_mariadb_private_ip }}"
  become: true

- name: Create database user and grant all necessary privileges
  mysql_user:
    name: "{{ mariadb_user }}"
    password: "{{ privacyidea_db_user_password }}"
    priv: "*.*:{{ db_privileges_global | join(',') }}/{{ privacyidea_mariadb_name }}.*:{{ db_privileges_specific | join(',') }}"
    host: "%"
    state: present
    login_user: "{{ privacyidea_mariadb_username }}"
    login_password: "{{ privacyidea_mariadb_password }}"
    login_host: "{{ privacyidea_mariadb_private_ip }}"
  become: true

- name: Copy uWSGI configuration
  template:
    src: privacyidea.ini.j2
    dest: /etc/uwsgi/apps-available/privacyidea.ini
  notify: restart uWSGI

- name: Enable uWSGI app for PrivacyIDEA
  file:
    src: /etc/uwsgi/apps-available/privacyidea.ini
    dest: /etc/uwsgi/apps-enabled/privacyidea.ini
    state: link
  notify: restart uWSGI

- name: Copy uWSGI service file
  template:
    src: uwsgi.service.j2
    dest: /etc/systemd/system/uwsgi.service
  notify: restart uWSGI

- name: Configure database connection
  template:
    src: pi.cfg.j2
    dest: /etc/privacyidea/pi.cfg
  notify: restart uWSGI

- name: Copy PrivacyIDEA WSGI script
  template:
    src: privacyideaapp.py.j2
    dest: /etc/privacyidea/privacyideaapp.py
  notify: restart uWSGI

- name: Reload systemd to recognize uwsgi service
  command: systemctl daemon-reload
  become: true

- name: Create database tables
  command: "{{ privacyidea_dir }}/virtualenv/bin/pi-manage create_tables"

- name: Stamping the database to the current database schema
  command: "{{ privacyidea_dir }}/virtualenv/bin/pi-manage db stamp head -d {{ privacyidea_dir }}/virtualenv/lib/privacyidea/migrations/"

- name: Create privacyIDEA admin user
  command: "{{ privacyidea_dir }}/virtualenv/bin/pi-manage admin add {{ privacyidea_admin }} --password {{ privacyidea_admin_password }} -e {{ privacyidea_admin }}@{{ admin_realm }} " 
  become: true
  become_user: www-data

- name: Create SQL resolver configuration file
  template:
    src: sql_resolver.ini.j2
    dest: /etc/privacyidea/sql_resolver.ini
    owner: www-data
    group: www-data
    mode: '0600'
  notify: restart uWSGI

- name: Create SQL admin resolver
  command: "{{ privacyidea_dir }}/virtualenv/bin/pi-manage resolver create {{ sql_admin_resolver }} sqlresolver /etc/privacyidea/sql_resolver.ini"
  become: true
  become_user: www-data
  notify: restart uWSGI

- name: Create admin realm
  command: "{{ privacyidea_dir }}/virtualenv/bin/pi-manage realm create {{ admin_realm }} {{ sql_admin_resolver }}"
  become: true
  become_user: www-data
  notify: restart uWSGI

- name: Create policy JSON file
  template:
    src: admin_policy.json.j2
    dest: /etc/privacyidea/admin_policy.json
  notify: restart uWSGI


- name: Create privacyIDEA admin policy
  command: "/opt/privacyidea/virtualenv/bin/pi-manage policy create -f /etc/privacyidea/admin_policy.json"
  ignore_errors: true